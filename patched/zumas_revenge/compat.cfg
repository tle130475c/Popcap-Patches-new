/*
	COMPAT.CFG

	This file is used by the game to determine certain settings related
	to graphics compatibility which may need to be changed after the game
	has been released (either by the users themselves or with the help
	of tech support).  For example, after the game has been out for some
	time, there may be a new graphics chipset on the market which causes
	unforeseen graphical glitches within the game.  The settings in this
	file can allow the game to be more easily tuned to specific hardware,
	to help handle some of these kinds of situations.
*/

/*
-----------------------------------------------------------------------------
	CONSTANTS
-----------------------------------------------------------------------------
*/
/*
	Vendor constants - these are PCI vendor IDs for makers of various
	graphics chipsets.  Feel free to add to this at will.
*/
var int VENDOR_NVIDIA	= 0x10DE;
var int VENDOR_ATI		= 0x1002;
var int VENDOR_INTEL	= 0x8086;
var int VENDOR_SIS		= 0x1039;
var int VENDOR_MATROX	= 0x102B;

/*
-----------------------------------------------------------------------------
	APP INITIALIZATION
-----------------------------------------------------------------------------
*/
// the following properties are available during app initialization
property int compat_AppVidMemory;
property int compat_AppSysMemFreeMB;
property int compat_AppSysMemTotalMB;
property int compat_AppOrigScreenWidth;
property int compat_AppOrigScreenHeight;

// these are available during app init, but will be replaced if necessary during d3d initialization
property int compat_D3DVendorID;
property int compat_D3DDeviceID;

function(bool) IsNVidiaOrATI
{
	return (compat_D3DVendorID == VENDOR_NVIDIA) || (compat_D3DVendorID == VENDOR_ATI);
}

/*
	GetAppDefaultRes - returns the default art resolution to use
*/
function(int) GetAppDefaultRes
{
	return 1200;
}


function(bool) IsHiResSupported
{
	return true;
}


/*
-----------------------------------------------------------------------------
	DD & D3D INITIALIZATION
-----------------------------------------------------------------------------
*/
// the following properties are available after D3D initialization
property int compat_D3DInterface;
property string compat_D3DDeviceDescription;
property int compat_D3DDriverVersionA;
property int compat_D3DDriverVersionB;
property int compat_D3DDriverVersionC;
property int compat_D3DDriverVersionD;
property string compat_D3DDriverVersion; // "A.B.C.D"
property string compat_D3DDriverName; // usually the name of the driver dll
property float compat_D3DVSVersion;
property float compat_D3DPSVersion;
property bool compat_IsVista;

/*
	Is3DSupported - returns whether the current D3D interface settings are
	acceptable (if this function is called, all other aspects of D3D
	initialization have passed for that particular compat_D3DInterface,
	so this function gets a final yea/nay on it).  The default should be true.
*/
function(bool) Is3DSupported
{
	return true;
}

function(bool) NVidiaIsGeForce2Era
{
	var int d = compat_D3DDeviceID;

	if (
	   (d >= 0x110 && d <= 0x113) // nv11
	|| (d >= 0x150 && d <= 0x153) // nv15
	|| (d >= 0x170 && d <= 0x17a) || (d == 0x17c) || (d == 0x17d) // nv17
	|| (d >= 0x181 && d <= 0x183) || (d >= 0x185 && d <= 0x188) || (d >= 0x18a && d <= 0x18d) // nv18
	)
	{
		return true;
	}

	return false;
}

/*
	Is3DRecommended - returns whether the current D3D interface settings
	indicate that 3D support is recommended, not just technically possible.
	This is primarily used to indicate buggy/flaky drivers, where we don't want
	to strictly disable 3D (and make the user think their hardware is inferior),
	but need to give some indication to them that a driver update would be a
	very good idea.
*/
function(bool) Is3DRecommended
{
	return true;
}

/*
	NeedMatchDepthBufferBits - returns whether the card needs its depth buffer
	bit depth to match the color buffer bit depth; used primarily with older hardware.
*/
function(bool) NeedMatchDepthBufferBits
{
	if (compat_D3DVendorID == VENDOR_NVIDIA)
	{
		if (call NVidiaIsGeForce2Era())
		{
			return true; // geforce 2 (NV11-16) and geforce 4 mx (NV17-18) era cards
		}
	}

	return false;
}

/*
	DDInterfaceReady - called after the DDInterface has been initialized,
	including any D3DInterface that may be within it
*/
function DDInterfaceReady
{
	if (compat_D3DInterface > 0)
	{
		//call InitShaders();
	}
}
